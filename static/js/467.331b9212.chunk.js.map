{"version":3,"file":"static/js/467.331b9212.chunk.js","mappings":"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","sources":["component/profile/profileInfo/ProfileStatus.jsx","component/profile/profileInfo/profileInfo.jsx","webpack://projectfordeploy/./src/component/profile/mypost/mypost.module.css?95f5","component/profile/mypost/post.jsx","component/profile/mypost/mypost.jsx","component/profile/mypost/MyPostContainer.jsx","component/profile/profile.jsx","component/profile/profileContainer.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport const ProfileStatus = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [statusProfile, setStatusProfile] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        if (!(props.status === statusProfile)) {\r\n            setStatusProfile(props.status)\r\n            console.log(2)\r\n        }\r\n        console.log(1)\r\n    }, [props.status])\r\n    let infoUrl = useParams()\r\n\r\n    const CheckOwnerChangeStatus = (statusEtidMode) => {\r\n        console.log(+infoUrl['*'], props.idOwner)\r\n        if((+infoUrl['*'] === props.idOwner) || !infoUrl['*']) {\r\n            setEditMode(statusEtidMode)\r\n        }\r\n    }\r\n\r\n    return <>\r\n        {!editMode ?\r\n            <div>\r\n                <span onClick={() => CheckOwnerChangeStatus(true)}>{props.status || 'no status'}</span>\r\n            </div>\r\n            :\r\n            <div>\r\n                <input\r\n                    autoFocus={true}\r\n                    onBlur={() => {\r\n                        CheckOwnerChangeStatus(false)\r\n                        props.updateStatusProfile(statusProfile)\r\n                    }}\r\n                    onChange={(e) => setStatusProfile(e.target.value)}\r\n                    value={statusProfile}></input>\r\n            </div>\r\n        }\r\n    </>;\r\n};\r\n\r\n","import React from \"react\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\nexport const ProfileInfo = (props) => {\r\n    if(!props.profileInfo) {\r\n        return <div>zagruzka</div>\r\n    }\r\n     return <>\r\n        <div>\r\n            <img\r\n                src=\"https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg\"\r\n                alt=\"\"/>\r\n        </div>\r\n        <div>\r\n            <img style={{width: 200}} src={props.profileInfo.photos.large} alt=\"\"/>\r\n            <ProfileStatus idOwner={props.idOwner} updateStatusProfile={props.updateStatusProfile} status={props.statusUser}/>\r\n            <div>Full Name: {props.profileInfo.fullName}</div>\r\n            <div>Contacts: {[Object.keys(props.profileInfo.contacts).map(el=> (\r\n                <div>{el}: {props.profileInfo.contacts[el]}</div>\r\n            ))]}\r\n            </div>\r\n        </div>\r\n    </>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"nav\":\"mypost_nav__7ujXt\",\"content\":\"mypost_content__jyCSU\",\"posts\":\"mypost_posts__hZ9jX\",\"item\":\"mypost_item__estES\"};","import React from 'react';\r\nimport s from \"./mypost.module.css\";\r\n\r\nexport const Post = ({numberPost, id, like, textPost}) => {\r\n    return (\r\n        <div className={s.item} key={id}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSg-EdfIW5O90FsK5KRfsfB0TM88Yl7brjCqg&usqp=CAU\"\r\n                alt=\"\"/>\r\n            <span>\r\n                <div>number post: {numberPost}</div>\r\n                <div>Text post: {textPost}</div>\r\n                <div>like {like}</div>\r\n                <div>\r\n                    <button>like</button>\r\n                </div>\r\n            </span>\r\n        </div>);\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './mypost.module.css'\r\nimport {Post} from \"./post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/formsControl/formsControl\";\r\n\r\n\r\n\r\n\r\nexport const MyPost = React.memo((props) => {\r\n    const postElements = () => {\r\n        return props.profilePage.map((obj, id) => {\r\n            return <Post key={id} textPost={obj.textPost} id={id} numberPost={obj.numberPost}\r\n                  like={obj.likes}/>\r\n        })\r\n    }\r\n\r\n    // const postElements = () => props.postInfo.map(obj => <Post textPost={obj.textPost} numberPost={obj.numberPost} like={obj.likes}/>)\r\n\r\n    const onSubmit = (formData) => {\r\n        props.addPost(formData.postText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div>my post\r\n                <div>\r\n                    <ReduxFormProfile onSubmit={onSubmit}/>\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {postElements()}\r\n                </div>\r\n            </div>\r\n            Main content\r\n        </div>\r\n    );\r\n});\r\n\r\nconst ProfileForm = (props) => {\r\n    const maxLength10 = maxLength(10)\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                name={'postText'}\r\n                component={Textarea}\r\n                placeholder={'Profile text post'}\r\n                validate= {[requiredField, maxLength10]}/>\r\n            <button>Add</button>\r\n            <button>Clear</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxFormProfile = reduxForm({form: 'profile'})(ProfileForm)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {MyPost} from \"./mypost\";\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        profilePage: state.profilePage.postInfo,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeValuePost: (e) => {\r\n            dispatch(updateNewPostTextActionCreator(e))\r\n        },\r\n        addPost: (textPost) => {\r\n            dispatch(addPostActionCreator(textPost))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)\r\n\r\n","import React from 'react';\r\nimport {ProfileInfo} from \"./profileInfo/profileInfo\";\r\nimport {MyPostContainer} from \"./mypost/MyPostContainer\";\r\n\r\nexport const Profile = (props) => {\r\n    return (\r\n        <div>\r\n           <ProfileInfo updateStatusProfile={props.updateStatusProfile} statusUser={props.statusUser} idOwner={props.idOwner} profileInfo={props.state.profilePage.profileInfo}/>\r\n           <MyPostContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {Profile} from \"./profile\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfileUser, getStatusProfile, setProfileDataAC, updateStatusProfile} from \"../../redux/profileReducer\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst ProfileContainerData = (props) => {\r\n    const infoUrl = useParams()\r\n\r\n    useEffect(() => {\r\n        if (infoUrl['*']) {\r\n            props.getProfileUser(infoUrl['*'])\r\n            props.getStatusProfile(infoUrl['*'])    //из-за этого проблема что компонента рендерится много раз компонента myPost\r\n        } else if (props.idOwner) {\r\n            props.getStatusProfile(props.idOwner)\r\n            props.getProfileUser(props.idOwner)\r\n        }\r\n    }, [infoUrl['*'], props.idOwner])\r\n\r\n\r\n    return <Profile {...props}/>\r\n};\r\nconst mapStateToProps = (state) => ({\r\n    state,\r\n    idOwner: state.headerPage.id,\r\n    statusUser: state.profilePage.statusUser\r\n})\r\n\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {updateStatusProfile, setProfileDataAC, getProfileUser, getStatusProfile}),\r\n)(ProfileContainerData)\r\n"],"names":["ProfileStatus","props","editMode","setEditMode","useState","statusProfile","setStatusProfile","status","useEffect","console","log","infoUrl","useParams","CheckOwnerChangeStatus","statusEtidMode","idOwner","_jsx","_Fragment","children","autoFocus","onBlur","updateStatusProfile","onChange","e","target","value","onClick","ProfileInfo","profileInfo","_jsxs","src","alt","style","width","photos","large","statusUser","fullName","Object","keys","contacts","map","el","Post","_ref","numberPost","id","like","textPost","className","s","MyPost","React","ReduxFormProfile","onSubmit","formData","addPost","postText","profilePage","obj","likes","reduxForm","form","maxLength10","maxLength","handleSubmit","Field","name","component","Textarea","placeholder","validate","requiredField","MyPostContainer","connect","state","postInfo","dispatch","changeValuePost","updateNewPostTextActionCreator","addPostActionCreator","Profile","compose","withAuthRedirect","headerPage","setProfileDataAC","getProfileUser","getStatusProfile"],"sourceRoot":""}